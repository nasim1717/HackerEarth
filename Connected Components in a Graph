///Connected Components in a Graph
#include<bits/stdc++.h>
using namespace std;
vector<int>ve[10000];
int visit[10000];
void dfs(int n){
    visit[n]=1;
    for(int child:ve[n]){
        if(!visit[child]){
            dfs(child);
        }
    }
}
int main(){
    int i,j,node,edge,u,v;
    int cnt=0;
    cin>>node>>edge;
    for(i=1; i<=edge; i++){
        cin>>u>>v;
        ve[u].push_back(v);
        ve[v].push_back(u);
    }
    for(i=1; i<=node; i++){
        if(!visit[i]){
            cnt++;
            dfs(i);
        }
    }
    cout<<cnt<<endl;
return 0;
}



//#include<bits/stdc++.h>
//using namespace std;
//int visit[20000];
//vector<int>ve[20000];
//void dfs(int node){
//    visit[node]=1;
//    for(int i=0; i<ve[node].size(); i++){
//        int child = ve[node][i];
//        if(visit[child]==0)
//            dfs(child);
//    }
//}
//int main(){
//    int i,j,n,u,v,a,b;
//    cin>>u>>v;
//    for(i=1; i<=v; i++){
//        cin>>a>>b;
//        ve[a].push_back(b);
//        ve[a].push_back(b);
//    }
//    int cnt=0;
//    for(i=1; i<=u; i++){
//        if(visit[i]==0){
//            dfs(i);
//            cnt++;
//        }
//    }
//    cout<<cnt<<endl;
//return 0;
//}

